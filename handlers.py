import asyncio
import datetime
import json
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiohttp.web_routedef import route
import keyboard as kb
from calendar_myad import recount as money_recount
from dfs import pushtojson, takefromjson
from run import router

class Add(StatesGroup):
    name = State()
    price = State()
class Substruct(StatesGroup):
    name = State()
    price = State()

addjsontopush = {}
subjsontopush = {}
insubedit = False
inaddedit = False

configjson = takefromjson("config.json")
admin_ids = configjson["ids"]

@router.message(CommandStart())
async def start(message: Message):
    if message.from_user.id in admin_ids:
        if message.from_user.id in configjson["ids"]:
            await message.answer('–ü—Ä–∏–≤–µ—Ç\n–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
                         reply_markup= kb.maink)

@router.message(Command('help'))
async def get_help(message: Message):
    if message.from_user.id in admin_ids:
        await message.answer("–ö–æ–º–∞–Ω–¥—ã: /add - –û–ø–ª–∞—Ç–∞ —É—á–µ–Ω–∏–∫–∞; /sub - –í—ã—á–µ—Å—Ç—å —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é")


@router.message(F.text == "üí∞üí∞üí∞–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å babosikiüí∞üí∞üí∞")
async def recount (message: Message):
    if message.from_user.id in admin_ids:
        money_recount()
        with open("babkibabkisukababki.json") as file:
            money = json.load(file)
        for i in money:
            if money[i] < 0:
                await message.answer(f'–î–æ–ª–≥ {i} —Ä–∞–≤–µ–Ω: {money[i]}')
            elif money[i] >= 0:
                await message.answer(f'–û—Å—Ç–∞—Ç–æ–∫ {i} —Ä–∞–≤–µ–Ω: {money[i]}')


@router.message(Command("add"))
async def addmoney(message: Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await state.set_state(Add.name)
        stringa = '–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ:\n'
        babosiki = takefromjson(configjson["moneycount"])
        for i in babosiki:
            stringa += f'`{i}`\n'
        stringa += '\n–í—ã–±–µ—Ä–∏—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ 1 –∏–∑ —ç—Ç–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤'
        await message.answer(stringa,
                       parse_mode="MARKDOWN")

@router.message(Add.name)
async def getname(message: Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        data = takefromjson(configjson["moneycount"])
        if message.text not in data:
            await message.answer('–Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ')
            await state.clear()
            return
        await state.update_data(name = message.text)
        await state.set_state(Add.price)
        await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–æ denyzhek)))')

@router.message(Add.price)
async def getprice(message: Message, state: FSMContext):
#–î–û–ë–ê–í–õ–Æ –ü–û–¢–û–ú –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ò –í–°–Ø –§–ò–ì–ù–Ø–í–ê–ß–ö–ê
    global inaddedit, addjsontopush
    if message.from_user.id in admin_ids:
        await state.update_data(price = message.text)
        data = await state.get_data()
        dat = takefromjson(configjson["moneycount"])
        dat[data["name"]] += int(data["price"])
        await state.clear()
        addjsontopush = dat
        inaddedit = True
        await message.answer(text=f'–ò–º—è: {data["name"]}\n–°—É–º–º–∞: {data["price"]}',
                             reply_markup=kb.Addedit)

@router.callback_query(F.data == 'addok')
async def addok(callback : CallbackQuery):
    global inaddedit, addjsontopush
    if inaddedit:
        await callback.message.edit_text(text='–£—Å–ø–µ—à–Ω–æ!',
                                         reply_markup=None)
        inaddedit = False
        pushtojson(configjson["moneycount"], addjsontopush)

@router.message(Command('sub'))
async def substruct(message: Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await state.set_state(Substruct.name)
        stringa = '–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ:\n'
        babosiki = takefromjson(configjson["moneycount"])
        for i in babosiki:
            stringa += f'`{i}`\n'
        stringa += '\n–í—ã–±–µ—Ä–∏—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ 1 –∏–∑ —ç—Ç–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤'
        await message.answer(stringa,
                             parse_mode="MARKDOWN")

@router.message(Substruct.name)
async def Subname(message : Message, state : FSMContext):
    if message.from_user.id in admin_ids:
        data = takefromjson(configjson["moneycount"])
        if message.text not in data:
            await message.answer('–Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ')
            await state.clear()
            return
    await state.update_data(name=message.text)
    await state.set_state(Substruct.price)
    await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å')

@router.message(Substruct.price)
async def Subprice(message : Message, state : FSMContext):
    global subjsontopush, insubedit
    if message.from_user.id in admin_ids:
        await state.update_data(price = message.text)
        data = await state.get_data()
        dat = takefromjson(configjson["moneycount"])
        dat[data["name"]] -= int(data["price"])
        subjsontopush = dat
        insubedit = True
        await state.clear()
        await message.answer(text=f'–ò–º—è: {data["name"]}\n–°—É–º–º–∞ –≤—ã—á–µ—Ç–∞: {data["price"]}',
                             reply_markup= kb.Subedit)

@router.callback_query(F.data == 'subok')
async def subok(callback : CallbackQuery):
    global subjsontopush, insubedit
    if insubedit:
        await callback.message.edit_text(text='–£—Å–ø–µ—à–Ω–æ!',
                                         reply_markup=None)
        insubedit = False
        pushtojson(configjson["moneycount"], subjsontopush)

@router.callback_query(F.data == 'wrong')
async def wrong(callback : CallbackQuery):
    await callback.message.delete()
    global insubedit, inaddedit
    await callback.message.answer(text='–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ - /sub –∏–ª–∏ /add')
    insubedit = False
    inaddedit = False